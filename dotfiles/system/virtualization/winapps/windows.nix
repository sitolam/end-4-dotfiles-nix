# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, settings, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."WinApps" = {
    image = "ghcr.io/dockur/windows:latest";
    environment = {
      "CPU_CORES" = "4";
      "DISK_SIZE" = "64G";
      "HOME" = "/home/${settings.username}";
      "PASSWORD" = "MyWindowsPassword";
      "RAM_SIZE" = "4G";
      "USERNAME" = "MyWindowsUser";
      "VERSION" = "11";
    };
    volumes = [
      "/home/${settings.username}:/shared:rw"
      "/home/${settings.username}/Documents/winapps/oem:/oem:rw"
      "winapps_data:/storage:rw"
    ];
    ports = [
      "8006:8006/tcp"
      "3389:3389/tcp"
      "3389:3389/udp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--device=/dev/kvm:/dev/kvm:rwm"
      "--device=/dev/net/tun:/dev/net/tun:rwm"
      "--network-alias=windows"
      "--network=winapps_default"
    ];
  };
  systemd.services."docker-WinApps" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
      RestartSec = lib.mkOverride 90 0;
    };
    after = [
      "docker-network-winapps_default.service"
      "docker-volume-winapps_data.service"
    ];
    requires = [
      "docker-network-winapps_default.service"
      "docker-volume-winapps_data.service"
    ];
  };

  # Networks
  systemd.services."docker-network-winapps_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f winapps_default";
    };
    script = ''
      docker network inspect winapps_default || docker network create winapps_default
    '';
    partOf = [ "docker-compose-winapps-root.target" ];
    wantedBy = [ "docker-compose-winapps-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-winapps_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect winapps_data || docker volume create winapps_data
    '';
    partOf = [ "docker-compose-winapps-root.target" ];
    wantedBy = [ "docker-compose-winapps-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-winapps-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}